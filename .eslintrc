{   //severity 0 = off, 1 = warning, 2 =  error
    "extends": "./.eslintrc-reset",
    "env": {
        "node": true,
        "browser": true,
        "amd": true,
        "mocha": true,
        "jquery": true
    },
    "globals": {
        "Mobify": true,
        "Zepto": true,
        "Adaptive": true,
        "define": true,
        "angular": true,
        "vm": true
    },
    "rules": {
        // K&R brace style, e.g. `if (x) {` <-- no new line before {

        // Disallow the use of debugger
        "no-debugger": 2,

        // Disallow the use of console
        "no-console": 2,

        // Disallow empty block statements
        "no-empty": 2,

        // Disallow empty functions
        "no-empty-function": 2,

        // Disallow return before else
        "no-else-return": 2,

        // Disallow Magic Numbers
        "no-magic-numbers": 2,

        // Disallow redeclaring variables in same block
        "no-redeclare": 2,

        // Disallow Unused Variables
        "no-unused-vars": 2,

        // Disallow undeclared variables (unless mentioned in /*global ...*/ comment)
        "no-undef": 2,

        // Enforce === instead of ==
        "eqeqeq": 2,

        // Enforce a maximum number of statements allowed in function blocks
        "max-statements": [2, 25],

        // Enforce that a function returns a specified type of value
        "consistent-return": 2,

        // Disallow Warning Comments
        "no-warning-comments": [2, { "terms": ["TODO", "fixme", "any other term"], "location": "anywhere" }],

        // Enforce variable declarations to be at the top of their scope
        "vars-on-top": 2,

        // Disallow nested ternary expressions
        "no-nested-ternary": 2,

        // Disallow ternary operators when simpler alternatives exist
        "no-unneeded-ternary": 2,

        // Enforce consistent brace style for blocks
        // The opening brace of a block is placed on the same line as its corresponding statement or declaration
        "brace-style": [2, "1tbs", { "allowSingleLine": true }],

        // Disallow usage of a variable before declaration; ignores functions
        // This rule will warn when it encounters a reference to an identifier that has not yet been declared
        "no-use-before-define": [2, "nofunc"],

        // Disallow creation of dense arrays using the Array constructor
        "no-array-constructor": 2,

        // Disallow use of the Object constructor
        "no-new-object": 2,

        // Disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": 2,

        // Enforce 4 spaces indentation
        "indent": [2, 4, {"SwitchCase": 1}],

        // Disallow use of multiline strings
        "no-multi-str": 2,

        // Warn if variables are not named with camelCase
        "camelcase": 1,

        // Disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 2,

        // Disallow spacing before commas; enforce spacing after commas
        "comma-spacing": [2, { "before": false, "after": true }],

        // Enforce spacing after keywords: if, else, for, while, do, switch, try,
        // catch, and finally
        "keyword-spacing": 2,

        // Enforce spacing before opening brace of block statements
        "space-before-blocks": [2, "always"],

        // Disallow spaces before function parentheses
        "space-before-function-paren": [2, "never"],

        // Enforce spaceing around infix operators: +, -, :, ?
        "space-infix-ops": 2,

        // Enforce spacing around word unary operators: new, delete, typeof, void
        // Disallow spacing around non-word unary operators: -, +, --, ++, !, !!
        "space-unary-ops": [2, { "words": true, "nonwords": false }],

        // Warn if single newline at end of file is missing
        "eol-last": 1,

        // Disallow unnecessary semicolons
        "no-extra-semi": 2,

        // Disallows the nesting of blocks more than 5 deep
        "max-depth": [2, 5],

        // Enforces a maximum of 100 characters in a single line; adjusts tabs
        // to equal 4 characters
        "max-len": [2, 300, 4],

        // Enforces semicolons at the end of statements
        "semi": 2,

        // Enforce trailing comma style
        "comma-style": [2, "last"],

        // Enforce max lines in a file
        "max-lines": [2, 100],

        // Prevent arguments.callee and arguments.caller
        "no-caller": 2,

        // Maximum formal parameters per function
        "max-params": [2, 10],

        // Disallow duplicate arguments in function definitions
        "no-dupe-args": 2,

        // Disallow duplicate keys in object literals
        "no-dupe-keys": 2,

        // Suppresses errors about invalid typeof operator values
        "valid-typeof": 2,

        // Disallow unreachable code after return, throw, continue, and break statements
        "no-unreachable": 2,

        // Enforces getter/setter pairs in objects
        "accessor-pairs": 2,

        // Enforce reducing cyclomatic complexity
        "complexity": [2, 10],

        // Disallow Assignment in return Statement
        "no-return-assign": [2, "always"],
    }
}
